@page "/RegistroClientes"
@page "/RegistroClientes/{ClienteId:int}"
@using System.ComponentModel.DataAnnotations
@inject ClientesBLL clientesBLL

<h3></h3>

<EditForm Model="cliente">
    
    <div class = "card">

        <div class = "card-header">
            <h1>Registro de clientes</h1>
        </div>
        <div class = "card-body">

            <div class="input-group mb-3">
            <InputNumber @bind-Value = "cliente.ClienteId" class="form-control" />
            <button @onclick = "Buscar" class="btn btn-outline-secondary oi oi-magnifying-glass" type="button" id="button-addon2"></button>
            </div>
        
            <div class="form-group">
                <label for="nombre">Nombre:</label>
                <InputText type="text" class="form-control" @bind-Value="@cliente.Nombre" />
                <ValidationMessage For="@(() => cliente.Nombre)" />
            </div>
            <div class="form-group">
                <label for="telefono">Telefono:</label>
                <InputText type="text" class="form-control" @bind-Value="@cliente.Telefono" />
                <ValidationMessage For="@(() => cliente.Telefono)" />
            </div>
            <div class="form-group">
                <label for="celular">Celular:</label>
                <InputText type="text" class="form-control" @bind-Value="@cliente.Celular" />
                <ValidationMessage For="@(() => cliente.Celular)" />
            </div>
            <div class="form-group">
                <label for="rnc">RNC:</label>
                <InputText type="text" class="form-control" @bind-Value="@cliente.RNC" />
                <ValidationMessage For="@(() => cliente.RNC)" />
            </div>
            <div class="form-group">
                <label for="email">Email:</label>
                <InputText type="email" class="form-control" @bind-Value="@cliente.Email" />
                <ValidationMessage For="@(() => cliente.Email)" />
            </div>
            <div class="form-group">
                <label for="direccion">Direcci√≥n:</label>
                <InputText type="text" class="form-control" @bind-Value="@cliente.Direccion" />
                <ValidationMessage For="@(() => cliente.Direccion)" />
    </div>

        </div>
        <div class="card-footer">
            <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file"/></button>
                    <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document"/></button>
                    <button type="button" class="btn btn-outline-danger"@onclick="Eliminar">Eliminar <i class="oi oi-trash"/></button>
            
        </div>
    </div>


</EditForm>

@code {
    [Parameter]
    public int ClienteId { get; set; }
    private List<Clientes> clientes = new List<Clientes>();
    private Clientes cliente = new Clientes();

    private void AgregarCliente()
    {
        if (clientesBLL.Guardar(cliente)){
            Nuevo();
        }
    }

    private void Eliminar()
    {
        if (clientesBLL.Eliminar(cliente)){
            Nuevo();
        }
    }

    private void Nuevo()
    {
        cliente = new Clientes();
    }

    public void Buscar()
    {
        var ClienteEncontrado = clientesBLL.Buscar(cliente.ClienteId);
        if(ClienteEncontrado != null){
            cliente = ClienteEncontrado;
        }
    }

    private bool ValidarCliente(Clientes cliente)
    {
        var context = new ValidationContext(cliente, serviceProvider: null, items: null);
        var results = new List<ValidationResult>();

        if (!Validator.TryValidateObject(cliente, context, results, validateAllProperties: true))
        {
            foreach (var validationResult in results)
            {
                Console.WriteLine(validationResult.ErrorMessage);
            }

            return false;
        }

        if (clientes.Any(c => c.Nombre == cliente.Nombre))
        {
            Console.WriteLine("Ya existe un cliente con el mismo nombre.");
            return false;
        }

        if (clientes.Any(c => c.RNC == cliente.RNC))
        {
            Console.WriteLine("Ya existe un cliente con el mismo RNC.");
            return false;
        }
        else
            return true;
    }
}
