@page "/RegistroTickets"
@page "/RegistroTickets/{TicketId:int}"
@inject TicketsBLL TicketsBLL
@inject ClientesBLL ClientesBLL
@inject PrioridadesBLL prioridadesBLL
@inject SistemasBLL SistemasBLL

<EditForm model = "Tickets" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class ="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Registro de Tickets.</h3>
            </div>
            <div class=card-body>
                <div class="row">
                    <div class="col-md-6">
                        <label>ID Ticket:</label>
                        <div class="input-group">
                            <InputNumber id="Buscar" @bind-Value ="tickets.TicketsId" class="form-control" aria-describedby="BotonBuscar"/>
                            <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="BotonBuscar"><i class ="oi oi-magnifying-glass"/></button>
                        </div>
                    </div>

                    <div class="col-md-6">
                            <label class="form-label" for="Fecha">Fecha:</label>
                            <InputDate @bind-Value="tickets.Fecha" class="form-control" />
                            <ValidationMessage For="@(() => tickets.Fecha)" />
                    </div>
                </div>
                
                <div class="row">

                    <div class="col-md-6">
                        <label class="form-label" for="ClienteId">ClienteId:</label>
                        <InputSelect @bind-Value="tickets.ClienteId" class="form-control">
                        @foreach(var item in L_Cliente)
                        {
                            <option value="@item.ClienteId">@item.ClienteId</option>
                        }
                        </InputSelect> 
                        <ValidationMessage For="@(() => tickets.ClienteId)"></ValidationMessage> 
                    </div>
                    <div class="col-md-6">
                        <label class="form-label" for="SistemaId">SistemaId:</label>
                        <InputSelect @bind-Value="tickets.SistemaId" class="form-control">
                        @foreach(var item in L_Sistemas)
                        {
                            <option value="@item.SistemaId">@item.SistemaId</option>
                        }
                        </InputSelect> 
                        <ValidationMessage For="@(() => tickets.SistemaId)"></ValidationMessage> 
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <label class="form-label" for="PrioridadId">PrioridadId:</label>
                        <InputSelect @bind-Value="tickets.PrioridadId" class="form-control">
                        @foreach(var item in L_Prioridades)
                        {
                            <option value="@item.PrioridadId">@item.PrioridadId</option>
                        }
                        </InputSelect> 
                        <ValidationMessage For="@(() => tickets.PrioridadId)"></ValidationMessage> 
                    </div>

                    <div class="col-md-6">
                        <label class="form-label" for="SolicitadoPor">SolicitadoPor:</label>
                        <InputText @bind-Value="tickets.SolicitadoPor" class="form-control"/>
                        <ValidationMessage For="@(() => tickets.SolicitadoPor)" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <label class="form-label" for="Asunto">Asunto:</label>
                        <InputText @bind-Value="tickets.Asunto" class="form-control"/>
                        <ValidationMessage For="@(() => tickets.Asunto)" />
                    </div>

                    <div class="col-md-6">
                        <label class="form-label" for="Descripcion">Descripcion:</label>
                        <InputText @bind-Value="tickets.Descripcion" class="form-control"/>
                        <ValidationMessage For="@(() => tickets.Descripcion)" />
                    </div>
                </div>
                
                @* Detalle *@
                <div class="card-header">
                    <h3>Detalle del ticket</h3>
                </div>

                <div>
                    <label class="form-label"><span class="oi oi-person"/> Nombre</label>
                    <InputText @bind-Value="Detalle.Emisor" class="form-control"/>
                </div>

                <div>
                    <label class="form-label"><span class="oi oi-envelope-closed"/> Mensaje</label>
                    <InputTextArea @bind-Value="Detalle.Mensaje" class="form-control" placeholder="Agregue un mensaje."/>
                </div>
                @* Agregar *@
                <div class="card-footer d-flex justify-content-center">
                    <button type="button" class="btn btn-outline-success" @onclick="AgregarDetalle">Agregar</button>
                </div>

                <table class='table table-sm'>
                    <thead>
                        <th>TicketId</th>
                        <th>Emisor</th>
                        <th>Mensaje</th>
                        <th></th>
                    </thead>
                    <tbody>
                        @foreach(var detalle in tickets.TicketsDetalles)
                        {
                            var ticketEncontrado = BuscarTicket(detalle.TicketId);
                            <tr>
                                <td>@tickets.TicketsId</td>
                                <td>@detalle.Emisor</td>
                                <td>@detalle.Mensaje</td>
                                <td><button type="button" class="btn btn-danger oi oi-trash" @onclick=@(() => RemoverDetalle(detalle))></button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file"/></button>
                    <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document"/></button>
                    <button type="button" class="btn btn-outline-danger"@onclick="Eliminar">Eliminar <i class="oi oi-trash"/></button>
                </div>
            </div>
        </div>
    </div>


</EditForm>
<label>@mensaje</label>

@code
{
    [Parameter]

    public int TicketId { get; set; }
    public TicketsDetalles Detalle { get; set; } = new TicketsDetalles();

    public Tickets tickets { get; set; } = new Tickets();

    public string mensaje = string.Empty;

    public List<Clientes> L_Cliente { get; set; } = new List<Clientes>();
    
    public List<Prioridades> L_Prioridades { get; set; } = new List<Prioridades>();
    
    public List<Sistemas> L_Sistemas { get; set; } = new List<Sistemas>();

    protected override void OnInitialized()
    {
        if(TicketId > 0)
        {
            tickets.TicketsId = TicketId;
            Buscar();
        }
        L_Cliente = ClientesBLL.Listar(c => true);
        L_Prioridades = prioridadesBLL.Listar(c => true);
        L_Sistemas = SistemasBLL.Listar(c => true);  
    }

    private Tickets BuscarTicket(int ticketId)
    {
        Tickets ticket = new Tickets();
        var ticketEncontrado = TicketsBLL.Buscar(ticketId);
        if(ticketEncontrado != null)
            return ticket = ticketEncontrado;
        return new Tickets();
    }

    public void Buscar()
    {
        var ticketEncontrado = TicketsBLL.Buscar(tickets.TicketsId);

        if(ticketEncontrado != null)
        {
            this.tickets = ticketEncontrado;
        }
        else
        {
            mensaje = "no se ha encontrado ese cliente";
        }
    }

    public void Guardar()
    {
        if(Validar())
        {
        
            if(TicketsBLL.Guardar(this.tickets))
            {
                mensaje= "Se ha guardado con exito";
                Nuevo();
            }
            else
            {
                mensaje = "Error al momento de guardar, intentelo de nuevo";
            }
        }
        else
        {
            mensaje = "Por favor rellene los campos";
        }
    }

    public bool Validar()
    {
        if(string.IsNullOrEmpty(tickets.SolicitadoPor))
        {
            return false;
        }
        if(string.IsNullOrEmpty(tickets.Asunto))
        {
            return false;
        }
        if(string.IsNullOrEmpty(tickets.Descripcion))
        {
            return false;
        }
        if(string.IsNullOrEmpty(Detalle.Emisor))
        {
            return false;
        }
        if(string.IsNullOrEmpty(Detalle.Mensaje))
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public void Nuevo()
    {
        this.tickets = new Tickets();
        mensaje = string.Empty;
        this.Detalle = new TicketsDetalles();
    }

    public void Eliminar()
    {
        if(Validar()){

            if(TicketsBLL.Eliminar(this.tickets))
            {
                mensaje="Se ha eliminado correctamente";
                Nuevo();
            }
            else
            {
                mensaje="Error al eliminar, intentelo de nuevo";
            }
            
        }else{
            mensaje = "No hay nada por eliminar";
        }
    }

    public void AgregarDetalle()
    {
        if(tickets != null)
        {
            Detalle.TicketId = tickets.TicketsId;
            
            tickets.TicketsDetalles.Add(Detalle);
            Detalle = new TicketsDetalles();
        }
    }
    void RemoverDetalle(TicketsDetalles detalle)
    {
        var detalleEncontrado = tickets.TicketsDetalles.Find(t => t.Id == detalle.Id);
        if(detalleEncontrado != null)
        {
            var ticket = BuscarTicket(detalleEncontrado.TicketId);
            detalle = detalleEncontrado;
            tickets.TicketsDetalles.Remove(detalle); 
        }
    }
}